import{_ as a,c as l,a as o,o as s}from"./app-BbxH2Yoy.js";const t={};function i(n,e){return s(),l("div",null,e[0]||(e[0]=[o('<h1 id="hotspot-垃圾收集器" tabindex="-1"><a class="header-anchor" href="#hotspot-垃圾收集器"><span>HotSpot 垃圾收集器</span></a></h1><p>HotSpot 虚拟机提供了多种垃圾收集器，每种收集器都有各自的特点，虽然我们要对各个收集器进行比较，但并非为了挑选出一个最好的收集器。我们选择的只是对具体应用最合适的收集器。</p><h2 id="新生代垃圾收集器" tabindex="-1"><a class="header-anchor" href="#新生代垃圾收集器"><span>新生代垃圾收集器</span></a></h2><h3 id="serial-垃圾收集器-单线程" tabindex="-1"><a class="header-anchor" href="#serial-垃圾收集器-单线程"><span>Serial 垃圾收集器（单线程）</span></a></h3><p>只开启<strong>一条</strong> GC 线程进行垃圾回收，并且在垃圾收集过程中停止一切用户线程，即 Stop The World。</p><p>一般客户端应用所需内存较小，不会创建太多对象，而且堆内存不大，因此垃圾收集器回收时间短，即使在这段时间停止一切用户线程，也不会感觉明显卡顿。因此 Serial 垃圾收集器<strong>适合客户端</strong>使用。</p><p>由于 Serial 收集器只使用一条 GC 线程，避免了线程切换的开销，从而简单高效。</p><p><img src="https://cdn-doocs.oss-cn-shenzhen.aliyuncs.com/gh/doocs/jvm@main/images/serial.png" alt="Serial"></p><h3 id="parnew-垃圾收集器-多线程" tabindex="-1"><a class="header-anchor" href="#parnew-垃圾收集器-多线程"><span>ParNew 垃圾收集器（多线程）</span></a></h3><p>ParNew 是 Serial 的多线程版本。由多条 GC 线程并行地进行垃圾清理。但清理过程依然需要 Stop The World。</p><p>ParNew 追求“<strong>低停顿时间</strong>”,与 Serial 唯一区别就是使用了多线程进行垃圾收集，在多 CPU 环境下性能比 Serial 会有一定程度的提升；但<strong>线程切换需要额外的开销</strong>，因此在单 CPU 环境中表现不如 Serial。</p><p><img src="https://cdn-doocs.oss-cn-shenzhen.aliyuncs.com/gh/doocs/jvm@main/images/parnew.png" alt="ParNew"></p><h3 id="parallel-scavenge-垃圾收集器-多线程" tabindex="-1"><a class="header-anchor" href="#parallel-scavenge-垃圾收集器-多线程"><span>Parallel Scavenge 垃圾收集器（多线程）</span></a></h3><p>Parallel Scavenge 和 ParNew 一样，都是多线程、新生代垃圾收集器。但是两者有巨大的不同点：</p><ul><li>Parallel Scavenge：追求 CPU 吞吐量，能够在较短时间内完成指定任务，因此适合没有交互的后台计算。</li><li>ParNew：追求降低用户停顿时间，适合交互式应用。</li></ul><p><code>吞吐量 = 运行用户代码时间 / (运行用户代码时间 + 垃圾收集时间)</code></p><p>追求高吞吐量，可以通过减少 GC 执行实际工作的时间，然而，仅仅偶尔运行 GC 意味着每当 GC 运行时将有许多工作要做，因为在此期间积累在堆中的对象数量很高。单个 GC 需要花更多的时间来完成，从而导致更高的暂停时间。而考虑到低暂停时间，最好频繁运行 GC 以便更快速完成，反过来又导致吞吐量下降。</p><ul><li>通过参数 -XX:GCTimeRadio 设置垃圾回收时间占总 CPU 时间的百分比。</li><li>通过参数 -XX:MaxGCPauseMillis 设置垃圾处理过程最久停顿时间。</li><li>通过命令 -XX:+UseAdaptiveSizePolicy 开启自适应策略。我们只要设置好堆的大小和 MaxGCPauseMillis 或 GCTimeRadio，收集器会自动调整新生代的大小、Eden 和 Survivor 的比例、对象进入老年代的年龄，以最大程度上接近我们设置的 MaxGCPauseMillis 或 GCTimeRadio。</li></ul><h2 id="老年代垃圾收集器" tabindex="-1"><a class="header-anchor" href="#老年代垃圾收集器"><span>老年代垃圾收集器</span></a></h2><h3 id="serial-old-垃圾收集器-单线程" tabindex="-1"><a class="header-anchor" href="#serial-old-垃圾收集器-单线程"><span>Serial Old 垃圾收集器（单线程）</span></a></h3><p>Serial Old 收集器是 Serial 的老年代版本，都是单线程收集器，只启用一条 GC 线程，都适合客户端应用。它们唯一的区别就是：Serial Old 工作在老年代，使用“标记-整理”算法；Serial 工作在新生代，使用“复制”算法。</p><h3 id="parallel-old-垃圾收集器-多线程" tabindex="-1"><a class="header-anchor" href="#parallel-old-垃圾收集器-多线程"><span>Parallel Old 垃圾收集器（多线程）</span></a></h3><p>Parallel Old 收集器是 Parallel Scavenge 的老年代版本，追求 CPU 吞吐量。</p><h3 id="cms-垃圾收集器" tabindex="-1"><a class="header-anchor" href="#cms-垃圾收集器"><span>CMS 垃圾收集器</span></a></h3><p>CMS（Concurrent Mark Sweep，并发标记清除）收集器是以获取最短回收停顿时间为目标的收集器（追求低停顿），它在垃圾收集时使得用户线程和 GC 线程并发执行，因此在垃圾收集过程中用户也不会感到明显的卡顿。</p><ul><li>初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。</li><li>并发标记：使用<strong>多条</strong>标记线程，与用户线程并发执行。此过程进行可达性分析，标记出所有废弃对象。速度很慢。</li><li>重新标记：Stop The World，使用多条标记线程并发执行，将刚才并发标记过程中新出现的废弃对象标记出来。</li><li>并发清除：只使用一条 GC 线程，与用户线程并发执行，清除刚才标记的对象。这个过程非常耗时。</li></ul><p>并发标记与并发清除过程耗时最长，且可以与用户线程一起工作，因此，<strong>总体上说</strong>，CMS 收集器的内存回收过程是与用户线程<strong>一起并发执行</strong>的。</p><p><img src="https://cdn-doocs.oss-cn-shenzhen.aliyuncs.com/gh/doocs/jvm@main/images/cms.png" alt="CMS"></p><p>CMS 的缺点：</p><ul><li>吞吐量低</li><li>无法处理浮动垃圾</li><li>使用“标记-清除”算法产生碎片空间，导致频繁 Full GC</li></ul><p>对于产生碎片空间的问题，可以通过开启 -XX:+UseCMSCompactAtFullCollection，在每次 Full GC 完成后都会进行一次内存压缩整理，将零散在各处的对象整理到一块。设置参数 -XX:CMSFullGCsBeforeCompaction 告诉 CMS，经过了 N 次 Full GC 之后再进行一次内存整理。</p><h2 id="g1-通用垃圾收集器" tabindex="-1"><a class="header-anchor" href="#g1-通用垃圾收集器"><span>G1 通用垃圾收集器</span></a></h2><p>G1 是一款面向服务端应用的垃圾收集器，它没有新生代和老年代的概念，而是将堆划分为一块块独立的 Region。当要进行垃圾收集时，首先估计每个 Region 中垃圾的数量，每次都从垃圾回收价值最大的 Region 开始回收，因此可以获得最大的回收效率。</p><p>从整体上看， G1 是基于“标记-整理”算法实现的收集器，从局部（两个 Region 之间）上看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</p><p>这里抛个问题 👇</p><blockquote><p>一个对象和它内部所引用的对象可能不在同一个 Region 中，那么当垃圾回收时，是否需要扫描整个堆内存才能完整地进行一次可达性分析？</p></blockquote><p>并不！每个 Region 都有一个 Remembered Set，用于记录本区域中所有对象引用的对象所在的区域，进行可达性分析时，只要在 GC Roots 中再加上 Remembered Set 即可防止对整个堆内存进行遍历。</p><p>如果不计算维护 Remembered Set 的操作，G1 收集器的工作过程分为以下几个步骤：</p><ul><li>初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。</li><li>并发标记：使用<strong>一条</strong>标记线程与用户线程并发执行。此过程进行可达性分析，速度很慢。</li><li>最终标记：Stop The World，使用多条标记线程并发执行。</li><li>筛选回收：回收废弃对象，此时也要 Stop The World，并使用多条筛选回收线程并发执行。</li></ul>',39)]))}const c=a(t,[["render",i]]),r=JSON.parse('{"path":"/04-hotspot-gc.html","title":"HotSpot 垃圾收集器","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"新生代垃圾收集器","slug":"新生代垃圾收集器","link":"#新生代垃圾收集器","children":[{"level":3,"title":"Serial 垃圾收集器（单线程）","slug":"serial-垃圾收集器-单线程","link":"#serial-垃圾收集器-单线程","children":[]},{"level":3,"title":"ParNew 垃圾收集器（多线程）","slug":"parnew-垃圾收集器-多线程","link":"#parnew-垃圾收集器-多线程","children":[]},{"level":3,"title":"Parallel Scavenge 垃圾收集器（多线程）","slug":"parallel-scavenge-垃圾收集器-多线程","link":"#parallel-scavenge-垃圾收集器-多线程","children":[]}]},{"level":2,"title":"老年代垃圾收集器","slug":"老年代垃圾收集器","link":"#老年代垃圾收集器","children":[{"level":3,"title":"Serial Old 垃圾收集器（单线程）","slug":"serial-old-垃圾收集器-单线程","link":"#serial-old-垃圾收集器-单线程","children":[]},{"level":3,"title":"Parallel Old 垃圾收集器（多线程）","slug":"parallel-old-垃圾收集器-多线程","link":"#parallel-old-垃圾收集器-多线程","children":[]},{"level":3,"title":"CMS 垃圾收集器","slug":"cms-垃圾收集器","link":"#cms-垃圾收集器","children":[]}]},{"level":2,"title":"G1 通用垃圾收集器","slug":"g1-通用垃圾收集器","link":"#g1-通用垃圾收集器","children":[]}],"git":{"updatedTime":1660099460000,"contributors":[{"name":"杨立滨","username":"杨立滨","email":"szuyanglb@outlook.com","commits":4,"url":"https://github.com/杨立滨"},{"name":"yanglbme","username":"yanglbme","email":"szuyanglb@outlook.com","commits":15,"url":"https://github.com/yanglbme"},{"name":"杨立滨","username":"杨立滨","email":"contact@yanglibin.info","commits":1,"url":"https://github.com/杨立滨"},{"name":"linnan","username":"linnan","email":"51509297+linnanc@users.noreply.github.com","commits":1,"url":"https://github.com/linnan"},{"name":"Yang Libin","username":"Yang Libin","email":"szuyanglb@outlook.com","commits":1,"url":"https://github.com/Yang Libin"}],"changelog":[{"hash":"ffe36a875d09e4665fc0ebbaf221d4fe063d1804","time":1660099460000,"email":"szuyanglb@outlook.com","author":"Yang Libin","message":"chore: update image path"},{"hash":"94acfd9a402efac78081c83b6275050017f7018d","time":1634803668000,"email":"51509297+linnanc@users.noreply.github.com","author":"linnan","message":"docs: update 04-hotspot-gc.md"},{"hash":"046ea2d9712bb7361e2dd7c09569cf631c16253f","time":1630462961000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"docs: update parts 03,04,05,09"},{"hash":"87857bb363b31c6b3410e350ec4ea967d4d0f5b5","time":1623891916000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"chore: move images to root path"},{"hash":"ab21dc98c1363617ae9f1c62c69d6dc86e95ff1b","time":1616904977000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"style: update dark mode"},{"hash":"b9ac90393daa17ac91f072406788d0320cd7ef97","time":1603199026000,"email":"yanglbme@users.noreply.github.com","author":"yanglbme","message":"docs: prettify code"},{"hash":"44141143eaf33a804d08844e6437b0dc4995261e","time":1586069633000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"feat: add docsify and pagination"},{"hash":"15106123780332a9ae661e9d4b8ae352e0bed39c","time":1546759880000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"docs: remove gitbook _config"},{"hash":"7259a066b4ffe6f2bc7cf5a5d74a461972409a64","time":1542376316000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"docs(img): change img path"},{"hash":"5812abcddf7be190ae25ff2f4fae537c1d75953c","time":1531985256000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update index"},{"hash":"fc29eb9f65b88bdd5dd5dcb0cc2ef782e463ff3b","time":1531984929000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Add Index"},{"hash":"7a92c0e4989eb8136143d52d2281fb15257b44be","time":1531278268000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Write EOF"},{"hash":"c93e695bfa72fb3a8bf0bf51ea6e1cb6b6e68e69","time":1531020505000,"email":"szuyanglb@outlook.com","author":"杨立滨","message":"Update 04-hotspot-gc.md"},{"hash":"44bb9a33ee01e13ffc8817d77cfee3fefb474161","time":1530252948000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Change path"},{"hash":"99ce82b1d8aa7c6e6451e108e35dfd958c05420c","time":1530186676000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Remove TOC"},{"hash":"a112cfd4f8cbd9de87c68112101c0ce4ed4a3fe5","time":1530183324000,"email":"contact@yanglibin.info","author":"杨立滨","message":"GitBook: [master] 12 pages modified"},{"hash":"26a1c453f8e4f2b56f07c9d36aae1959a1cf2e5f","time":1529933044000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Format doc style"},{"hash":"3d396e0a4b59619bbcbf24b383cbb1b0a858e136","time":1529914171000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update format"},{"hash":"e7436bd325af1fb64abbeb4886609414a17f3327","time":1529912260000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Rename filename"},{"hash":"dcea1630a4d1910b38042bf21fde4a00531f4bda","time":1529893108000,"email":"szuyanglb@outlook.com","author":"杨立滨","message":"Update 04_HotSpot垃圾收集器.md"},{"hash":"b80edde1b1c41f96afeed45dfabe44d850ec6e37","time":1529830573000,"email":"szuyanglb@outlook.com","author":"杨立滨","message":"Update 04_HotSpot垃圾收集器.md"},{"hash":"5355e1f1afb64f57f3fbb90ad0a0b162d7ee37af","time":1529830493000,"email":"szuyanglb@outlook.com","author":"杨立滨","message":"Create 04_HotSpot垃圾收集器.md"}]},"filePathRelative":"04-hotspot-gc.md"}');export{c as comp,r as data};
