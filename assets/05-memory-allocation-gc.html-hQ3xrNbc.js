import{_ as a,c as o,a as l,o as n}from"./app-BbxH2Yoy.js";const t={};function s(c,e){return n(),o("div",null,e[0]||(e[0]=[l('<h1 id="内存分配与回收策略" tabindex="-1"><a class="header-anchor" href="#内存分配与回收策略"><span>内存分配与回收策略</span></a></h1><p>对象的内存分配，就是在堆上分配（也可能经过 JIT 编译后被拆散为标量类型并间接在栈上分配），对象主要分配在新生代的 Eden 区上，少数情况下可能直接分配在老年代，<strong>分配规则不固定</strong>，取决于当前使用的垃圾收集器组合以及相关的参数配置。</p><p>以下列举几条最普遍的内存分配规则，供大家学习。</p><h2 id="对象优先在-eden-分配" tabindex="-1"><a class="header-anchor" href="#对象优先在-eden-分配"><span>对象优先在 Eden 分配</span></a></h2><p>大多数情况下，对象在新生代 Eden 区中分配。当 Eden 区没有足够空间进行分配时，虚拟机将发起一次 Minor GC。</p><p>👇<strong>Minor GC</strong> vs <strong>Major GC</strong>/<strong>Full GC</strong>：</p><ul><li>Minor GC：回收新生代（包括 Eden 和 Survivor 区域），因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。</li><li>Major GC / Full GC：回收老年代，出现了 Major GC，经常会伴随至少一次的 Minor GC，但这并非绝对。Major GC 的速度一般会比 Minor GC 慢 10 倍 以上。</li></ul><blockquote><p>在 JVM 规范中，Major GC 和 Full GC 都没有一个正式的定义，所以有人也简单地认为 Major GC 清理老年代，而 Full GC 清理整个内存堆。</p></blockquote><h2 id="大对象直接进入老年代" tabindex="-1"><a class="header-anchor" href="#大对象直接进入老年代"><span>大对象直接进入老年代</span></a></h2><p>大对象是指需要大量连续内存空间的 Java 对象，如很长的字符串或数据。</p><p>一个大对象能够存入 Eden 区的概率比较小，发生分配担保的概率比较大，而分配担保需要涉及大量的复制，就会造成效率低下。</p><p>虚拟机提供了一个 -XX:PretenureSizeThreshold 参数，令大于这个设置值的对象直接在老年代分配，这样做的目的是避免在 Eden 区及两个 Survivor 区之间发生大量的内存复制。（还记得吗，新生代采用复制算法回收垃圾）</p><h2 id="长期存活的对象将进入老年代" tabindex="-1"><a class="header-anchor" href="#长期存活的对象将进入老年代"><span>长期存活的对象将进入老年代</span></a></h2><p>JVM 给每个对象定义了一个对象年龄计数器。当新生代发生一次 Minor GC 后，存活下来的对象年龄 +1，当年龄超过一定值时，就将超过该值的所有对象转移到老年代中去。</p><p>使用 <code>-XXMaxTenuringThreshold</code> 设置新生代的最大年龄，只要超过该参数的新生代对象都会被转移到老年代中去。</p><h2 id="动态对象年龄判定" tabindex="-1"><a class="header-anchor" href="#动态对象年龄判定"><span>动态对象年龄判定</span></a></h2><p>如果当前新生代的 Survivor 中，相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄 &gt;= 该年龄的对象就可以直接进入老年代，无须等到 <code>MaxTenuringThreshold</code> 中要求的年龄。</p><h2 id="空间分配担保" tabindex="-1"><a class="header-anchor" href="#空间分配担保"><span>空间分配担保</span></a></h2><p>JDK 6 Update 24 之前的规则是这样的：</p><p>在发生 Minor GC 之前，虚拟机会先检查<strong>老年代最大可用的连续空间是否大于新生代所有对象总空间</strong>， 如果这个条件成立，Minor GC 可以确保是安全的； 如果不成立，则虚拟机会查看 <code>HandlePromotionFailure</code> 值是否设置为允许担保失败， 如果是，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小， 如果大于，将尝试进行一次 Minor GC，尽管这次 Minor GC 是有风险的； 如果小于，或者 <code>HandlePromotionFailure</code> 设置不允许冒险，那此时也要改为进行一次 Full GC。</p><p>JDK 6 Update 24 之后的规则变为：</p><p>只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小，就会进行 Minor GC，否则将进行 Full GC。</p><p>通过清除老年代中的废弃数据来扩大老年代空闲空间，以便给新生代作担保。</p><p>这个过程就是分配担保。</p><hr><p>👇 总结一下有哪些情况可能会触发 JVM 进行 Full GC。</p><ol><li><strong><code>System.gc()</code> 方法的调用</strong> 此方法的调用是建议 JVM 进行 Full GC，注意这<strong>只是建议而非一定</strong>，但在很多情况下它会触发 Full GC，从而增加 Full GC 的频率。通常情况下我们只需要让虚拟机自己去管理内存即可，我们可以通过 -XX:+ DisableExplicitGC 来禁止调用 <code>System.gc()</code>。</li><li><strong>老年代空间不足</strong> 老年代空间不足会触发 Full GC 操作，若进行该操作后空间依然不足，则会抛出如下错误：<code>java.lang.OutOfMemoryError: Java heap space</code></li><li><strong>永久代空间不足</strong> JVM 规范中运行时数据区域中的方法区，在 HotSpot 虚拟机中也称为永久代（Permanet Generation），存放一些类信息、常量、静态变量等数据，当系统要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，会触发 Full GC。如果经过 Full GC 仍然回收不了，那么 JVM 会抛出如下错误信息：<code>java.lang.OutOfMemoryError: PermGen space </code></li><li><strong>CMS GC 时出现 <code>promotion failed</code> 和 <code>concurrent mode failure</code></strong> promotion failed，就是上文所说的担保失败，而 concurrent mode failure 是在执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足造成的。</li><li><strong>统计得到的 Minor GC 晋升到旧生代的平均大小大于老年代的剩余空间。</strong></li></ol>',27)]))}const r=a(t,[["render",s]]),m=JSON.parse('{"path":"/05-memory-allocation-gc.html","title":"内存分配与回收策略","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"对象优先在 Eden 分配","slug":"对象优先在-eden-分配","link":"#对象优先在-eden-分配","children":[]},{"level":2,"title":"大对象直接进入老年代","slug":"大对象直接进入老年代","link":"#大对象直接进入老年代","children":[]},{"level":2,"title":"长期存活的对象将进入老年代","slug":"长期存活的对象将进入老年代","link":"#长期存活的对象将进入老年代","children":[]},{"level":2,"title":"动态对象年龄判定","slug":"动态对象年龄判定","link":"#动态对象年龄判定","children":[]},{"level":2,"title":"空间分配担保","slug":"空间分配担保","link":"#空间分配担保","children":[]}],"git":{"updatedTime":1652175101000,"contributors":[{"name":"杨立滨","username":"杨立滨","email":"szuyanglb@outlook.com","commits":3,"url":"https://github.com/杨立滨"},{"name":"yanglbme","username":"yanglbme","email":"szuyanglb@outlook.com","commits":12,"url":"https://github.com/yanglbme"},{"name":"杨立滨","username":"杨立滨","email":"contact@yanglibin.info","commits":1,"url":"https://github.com/杨立滨"},{"name":"chenqiao","username":"chenqiao","email":"bigjoechan@163.com","commits":1,"url":"https://github.com/chenqiao"}],"changelog":[{"hash":"f7ac74e7ad02443ae6d654dfaca8225137f30133","time":1652175101000,"email":"bigjoechan@163.com","author":"chenqiao","message":"docs: update 05-memory-allocation-gc.md (#27)"},{"hash":"046ea2d9712bb7361e2dd7c09569cf631c16253f","time":1630462961000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"docs: update parts 03,04,05,09"},{"hash":"84b1e1a6cd735a27a2753cf84cec68ffc14b65e4","time":1627991187000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"docs: update articles"},{"hash":"b9ac90393daa17ac91f072406788d0320cd7ef97","time":1603199026000,"email":"yanglbme@users.noreply.github.com","author":"yanglbme","message":"docs: prettify code"},{"hash":"44141143eaf33a804d08844e6437b0dc4995261e","time":1586069633000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"feat: add docsify and pagination"},{"hash":"5812abcddf7be190ae25ff2f4fae537c1d75953c","time":1531985256000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update index"},{"hash":"fc29eb9f65b88bdd5dd5dcb0cc2ef782e463ff3b","time":1531984929000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Add Index"},{"hash":"7a92c0e4989eb8136143d52d2281fb15257b44be","time":1531278268000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Write EOF"},{"hash":"319771e9b756415503f65216741aec07144bf574","time":1531037312000,"email":"szuyanglb@outlook.com","author":"杨立滨","message":"Update 05-memory-allocation-gc.md"},{"hash":"26f448edcf8b90cc1fdef5065118d1ef6b7b6a07","time":1531021558000,"email":"szuyanglb@outlook.com","author":"杨立滨","message":"Update 05-memory-allocation-gc.md"},{"hash":"44bb9a33ee01e13ffc8817d77cfee3fefb474161","time":1530252948000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Change path"},{"hash":"99ce82b1d8aa7c6e6451e108e35dfd958c05420c","time":1530186676000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Remove TOC"},{"hash":"a112cfd4f8cbd9de87c68112101c0ce4ed4a3fe5","time":1530183324000,"email":"contact@yanglibin.info","author":"杨立滨","message":"GitBook: [master] 12 pages modified"},{"hash":"26a1c453f8e4f2b56f07c9d36aae1959a1cf2e5f","time":1529933044000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Format doc style"},{"hash":"3d396e0a4b59619bbcbf24b383cbb1b0a858e136","time":1529914171000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update format"},{"hash":"e7436bd325af1fb64abbeb4886609414a17f3327","time":1529912260000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Rename filename"},{"hash":"341f1a14bc1454af3de1395119d89d62aaba8e22","time":1529839056000,"email":"szuyanglb@outlook.com","author":"杨立滨","message":"Create 05_内存分配与回收策略.md"}]},"filePathRelative":"05-memory-allocation-gc.md"}');export{r as comp,m as data};
