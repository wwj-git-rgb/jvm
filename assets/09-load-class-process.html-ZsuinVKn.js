import{_ as s,c as n,a as e,o as l}from"./app-BbxH2Yoy.js";const t={};function i(c,a){return l(),n("div",null,a[0]||(a[0]=[e(`<h1 id="类加载的过程" tabindex="-1"><a class="header-anchor" href="#类加载的过程"><span>类加载的过程</span></a></h1><p>类加载过程包括 5 个阶段：加载、验证、准备、解析和初始化。</p><h2 id="加载" tabindex="-1"><a class="header-anchor" href="#加载"><span>加载</span></a></h2><h3 id="加载的过程" tabindex="-1"><a class="header-anchor" href="#加载的过程"><span>加载的过程</span></a></h3><p>“加载”是“类加载”过程的一个阶段，不能混淆这两个名词。在加载阶段，虚拟机需要完成 3 件事：</p><ul><li>通过类的全限定名获取该类的二进制字节流。</li><li>将二进制字节流所代表的静态结构转化为方法区的运行时数据结构。</li><li>在内存中创建一个代表该类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。</li></ul><h3 id="获取二进制字节流" tabindex="-1"><a class="header-anchor" href="#获取二进制字节流"><span>获取二进制字节流</span></a></h3><p>对于 Class 文件，虚拟机没有指明要从哪里获取、怎样获取。除了直接从编译好的 .class 文件中读取，还有以下几种方式：</p><ul><li>从 zip 包中读取，如 jar、war 等；</li><li>从网络中获取，如 Applet；</li><li>通过动态代理技术生成代理类的二进制字节流；</li><li>由 JSP 文件生成对应的 Class 类；</li><li>从数据库中读取，如 有些中间件服务器可以选择把程序安装到数据库中来完成程序代码在集群间的分发。</li></ul><h3 id="非数组类-与-数组类-加载比较" tabindex="-1"><a class="header-anchor" href="#非数组类-与-数组类-加载比较"><span>“非数组类”与“数组类”加载比较</span></a></h3><ul><li>非数组类加载阶段可以使用系统提供的引导类加载器，也可以由用户自定义的类加载器完成，开发人员可以通过定义自己的类加载器控制字节流的获取方式（如重写一个类加载器的 <code>loadClass()</code> 方法）。</li><li>数组类本身不通过类加载器创建，它是由 Java 虚拟机直接创建的，再由类加载器创建数组中的元素类。</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li>虚拟机规范未规定 Class 对象的存储位置，对于 HotSpot 虚拟机而言，Class 对象比较特殊，它虽然是对象，但存放在方法区中。</li><li>加载阶段与连接阶段的部分内容交叉进行，加载阶段尚未完成，连接阶段可能已经开始了。但这两个阶段的开始时间仍然保持着固定的先后顺序。</li></ul><h2 id="验证" tabindex="-1"><a class="header-anchor" href="#验证"><span>验证</span></a></h2><h3 id="验证的重要性" tabindex="-1"><a class="header-anchor" href="#验证的重要性"><span>验证的重要性</span></a></h3><p>验证阶段确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><h3 id="验证的过程" tabindex="-1"><a class="header-anchor" href="#验证的过程"><span>验证的过程</span></a></h3><ul><li>文件格式验证 验证字节流是否符合 Class 文件格式的规范，并且能被当前版本的虚拟机处理，验证点如下： <ul><li>是否以魔数 0XCAFEBABE 开头。</li><li>主次版本号是否在当前虚拟机处理范围内。</li><li>常量池是否有不被支持的常量类型。</li><li>指向常量的索引值是否指向了不存在的常量。</li><li>CONSTANT_Utf8_info 型的常量是否有不符合 UTF8 编码的数据。</li><li>......</li></ul></li><li>元数据验证 对字节码描述信息进行语义分析，确保其符合 Java 语法规范。</li><li>字节码验证 本阶段是验证过程中最复杂的一个阶段，是对方法体进行语义分析，保证方法在运行时不会出现危害虚拟机的事件。</li><li>符号引用验证 本阶段发生在解析阶段，确保解析正常执行。</li></ul><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><p>准备阶段是正式为类变量（或称“静态成员变量”）分配内存并设置初始值的阶段。这些变量（不包括实例变量）所使用的内存都在方法区中进行分配。</p><p>初始值“通常情况下”是数据类型的零值（0, null...），假设一个类变量的定义为：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么变量 value 在准备阶段过后的初始值为 0 而不是 123，因为这时候尚未开始执行任何 Java 方法。</p><p>存在“特殊情况”：如果类字段的字段属性表中存在 ConstantValue 属性，那么在准备阶段 value 就会被初始化为 ConstantValue 属性所指定的值，假设上面类变量 value 的定义变为：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那么在准备阶段虚拟机会根据 ConstantValue 的设置将 value 赋值为 123。</p><h2 id="解析" tabindex="-1"><a class="header-anchor" href="#解析"><span>解析</span></a></h2><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><p>类初始化阶段是类加载过程的最后一步，是执行类构造器 <code>&lt;clinit&gt;()</code> 方法的过程。</p><p><code>&lt;clinit&gt;()</code> 方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static {} 块）中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的。</p><p>静态语句块中只能访问定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块中可以赋值，但不能访问。如下方代码所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 给变量赋值可以正常编译通过</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这句编译器会提示“非法向前引用”</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;clinit&gt;()</code> 方法不需要显式调用父类构造器，虚拟机会保证在子类的 <code>&lt;clinit&gt;()</code> 方法执行之前，父类的 <code>&lt;clinit&gt;()</code> 方法已经执行完毕。</p><p>由于父类的 <code>&lt;clinit&gt;()</code> 方法先执行，意味着父类中定义的静态语句块要优先于子类的变量赋值操作。如下方代码所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Parent</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Sub<span class="token punctuation">.</span>B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;clinit&gt;()</code> 方法不是必需的，如果一个类没有静态语句块，也没有对类变量的赋值操作，那么编译器可以不为这个类生成 <code>&lt;clinit&gt;()</code> 方法。</p><p>接口中不能使用静态代码块，但接口也需要通过 <code>&lt;clinit&gt;()</code> 方法为接口中定义的静态成员变量显式初始化。但接口与类不同，接口的 <code>&lt;clinit&gt;()</code> 方法不需要先执行父类的 <code>&lt;clinit&gt;()</code> 方法，只有当父接口中定义的变量使用时，父接口才会初始化。</p><p>虚拟机会保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程环境中被正确加锁、同步。如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的 <code>&lt;clinit&gt;()</code> 方法。</p>`,39)]))}const o=s(t,[["render",i]]),d=JSON.parse('{"path":"/09-load-class-process.html","title":"类加载的过程","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"加载","slug":"加载","link":"#加载","children":[{"level":3,"title":"加载的过程","slug":"加载的过程","link":"#加载的过程","children":[]},{"level":3,"title":"获取二进制字节流","slug":"获取二进制字节流","link":"#获取二进制字节流","children":[]},{"level":3,"title":"“非数组类”与“数组类”加载比较","slug":"非数组类-与-数组类-加载比较","link":"#非数组类-与-数组类-加载比较","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}]},{"level":2,"title":"验证","slug":"验证","link":"#验证","children":[{"level":3,"title":"验证的重要性","slug":"验证的重要性","link":"#验证的重要性","children":[]},{"level":3,"title":"验证的过程","slug":"验证的过程","link":"#验证的过程","children":[]}]},{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":2,"title":"解析","slug":"解析","link":"#解析","children":[]},{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]}],"git":{"updatedTime":1630462961000,"contributors":[{"name":"yanglbme","username":"yanglbme","email":"szuyanglb@outlook.com","commits":10,"url":"https://github.com/yanglbme"},{"name":"杨立滨","username":"杨立滨","email":"contact@yanglibin.info","commits":1,"url":"https://github.com/杨立滨"},{"name":"Yang Libin","username":"Yang Libin","email":"szuyanglb@outlook.com","commits":1,"url":"https://github.com/Yang Libin"}],"changelog":[{"hash":"046ea2d9712bb7361e2dd7c09569cf631c16253f","time":1630462961000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"docs: update parts 03,04,05,09"},{"hash":"eb967d76db398be3d4718d9140d8f4663e97622f","time":1608651434000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"docs: improve readability"},{"hash":"b9ac90393daa17ac91f072406788d0320cd7ef97","time":1603199026000,"email":"yanglbme@users.noreply.github.com","author":"yanglbme","message":"docs: prettify code"},{"hash":"44141143eaf33a804d08844e6437b0dc4995261e","time":1586069633000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"feat: add docsify and pagination"},{"hash":"32c55e395f4350130a403de0b9ac94983aa06486","time":1578013192000,"email":"szuyanglb@outlook.com","author":"Yang Libin","message":"docs: fix typo and close #9"},{"hash":"5812abcddf7be190ae25ff2f4fae537c1d75953c","time":1531985256000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update index"},{"hash":"fc29eb9f65b88bdd5dd5dcb0cc2ef782e463ff3b","time":1531984929000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Add Index"},{"hash":"7a92c0e4989eb8136143d52d2281fb15257b44be","time":1531278268000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Write EOF"},{"hash":"44bb9a33ee01e13ffc8817d77cfee3fefb474161","time":1530252948000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Change path"},{"hash":"99ce82b1d8aa7c6e6451e108e35dfd958c05420c","time":1530186676000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Remove TOC"},{"hash":"a112cfd4f8cbd9de87c68112101c0ce4ed4a3fe5","time":1530183324000,"email":"contact@yanglibin.info","author":"杨立滨","message":"GitBook: [master] 12 pages modified"},{"hash":"35c4b6c49e387f9d62a767ac0e377fc37802cec2","time":1529997878000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Create 09-load-class-process.md"}]},"filePathRelative":"09-load-class-process.md"}');export{o as comp,d as data};
