import{_ as a,c as l,a as o,o as t}from"./app-BbxH2Yoy.js";const m={};function s(i,e){return t(),l("div",null,e[0]||(e[0]=[o('<h1 id="jvm-性能调优" tabindex="-1"><a class="header-anchor" href="#jvm-性能调优"><span>JVM 性能调优</span></a></h1><p>在高性能硬件上部署程序，目前主要有两种方式：</p><ul><li>通过 64 位 JDK 来使用大内存；</li><li>使用若干个 32 位虚拟机建立逻辑集群来利用硬件资源。</li></ul><h2 id="使用-64-位-jdk-管理大内存" tabindex="-1"><a class="header-anchor" href="#使用-64-位-jdk-管理大内存"><span>使用 64 位 JDK 管理大内存</span></a></h2><p>堆内存变大后，虽然垃圾收集的频率减少了，但每次垃圾回收的时间变长。 如果堆内存为 14 G，那么每次 Full GC 将长达数十秒。如果 Full GC 频繁发生，那么对于一个网站来说是无法忍受的。</p><p>对于用户交互性强、对停顿时间敏感的系统，可以给 Java 虚拟机分配超大堆的前提是有把握把应用程序的 Full GC 频率控制得足够低，至少要低到不会影响用户使用。</p><p>可能面临的问题：</p><ul><li>内存回收导致的长时间停顿；</li><li>现阶段，64 位 JDK 的性能普遍比 32 位 JDK 低；</li><li>需要保证程序足够稳定，因为这种应用要是产生堆溢出几乎就无法产生堆转储快照（因为要产生超过 10GB 的 Dump 文件），哪怕产生了快照也几乎无法进行分析；</li><li>相同程序在 64 位 JDK 消耗的内存一般比 32 位 JDK 大，这是由于指针膨胀，以及数据类型对齐补白等因素导致的。</li></ul><h2 id="使用-32-位-jvm-建立逻辑集群" tabindex="-1"><a class="header-anchor" href="#使用-32-位-jvm-建立逻辑集群"><span>使用 32 位 JVM 建立逻辑集群</span></a></h2><p>在一台物理机器上启动多个应用服务器进程，每个服务器进程分配不同端口， 然后在前端搭建一个负载均衡器，以反向代理的方式来分配访问请求。</p><p>考虑到在一台物理机器上建立逻辑集群的目的仅仅是为了尽可能利用硬件资源，并不需要关心状态保留、热转移之类的高可用性能需求， 也不需要保证每个虚拟机进程有绝对的均衡负载，因此使用无 Session 复制的亲合式集群是一个不错的选择。 我们仅仅需要保障集群具备亲合性，也就是均衡器按一定的规则算法（一般根据 SessionID 分配） 将一个固定的用户请求永远分配到固定的一个集群节点进行处理即可。</p><p>可能遇到的问题：</p><ul><li>尽量避免节点竞争全局资源，如磁盘竞争，各个节点如果同时访问某个磁盘文件的话，很可能导致 IO 异常；</li><li>很难高效利用资源池，如连接池，一般都是在节点建立自己独立的连接池，这样有可能导致一些节点池满了而另外一些节点仍有较多空余；</li><li>各个节点受到 32 位的内存限制；</li><li>大量使用本地缓存的应用，在逻辑集群中会造成较大的内存浪费，因为每个逻辑节点都有一份缓存，这时候可以考虑把本地缓存改成集中式缓存。</li></ul><h2 id="调优案例分析与实战" tabindex="-1"><a class="header-anchor" href="#调优案例分析与实战"><span>调优案例分析与实战</span></a></h2><h3 id="场景描述" tabindex="-1"><a class="header-anchor" href="#场景描述"><span>场景描述</span></a></h3><p>一个小型系统，使用 32 位 JDK，4G 内存，测试期间发现服务端不定时抛出内存溢出异常。 加入 -XX:+HeapDumpOnOutOfMemoryError（添加这个参数后，堆内存溢出时就会输出异常日志）， 但再次发生内存溢出时，没有生成相关异常日志。</p><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析"><span>分析</span></a></h3><p>在 32 位 JDK 上，1.6G 分配给堆，还有一部分分配给 JVM 的其他内存，直接内存最大也只能在剩余的 0.4G 空间中分出一部分， 如果使用了 NIO，JVM 会在 JVM 内存之外分配内存空间，那么就要小心“直接内存”不足时发生内存溢出异常了。</p><h3 id="直接内存的回收过程" tabindex="-1"><a class="header-anchor" href="#直接内存的回收过程"><span>直接内存的回收过程</span></a></h3><p>直接内存虽然不是 JVM 内存空间，但它的垃圾回收也由 JVM 负责。</p><p>垃圾收集进行时，虚拟机虽然会对直接内存进行回收， 但是直接内存却不能像新生代、老年代那样，发现空间不足了就通知收集器进行垃圾回收， 它只能等老年代满了后 Full GC，然后“顺便”帮它清理掉内存的废弃对象。 否则只能一直等到抛出内存溢出异常时，先 catch 掉，再在 catch 块里大喊 “<code>System.gc()</code>”。 要是虚拟机还是不听，那就只能眼睁睁看着堆中还有许多空闲内存，自己却不得不抛出内存溢出异常了。</p>',21)]))}const c=a(m,[["render",s]]),h=JSON.parse('{"path":"/06-jvm-performance-tuning.html","title":"JVM 性能调优","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"使用 64 位 JDK 管理大内存","slug":"使用-64-位-jdk-管理大内存","link":"#使用-64-位-jdk-管理大内存","children":[]},{"level":2,"title":"使用 32 位 JVM 建立逻辑集群","slug":"使用-32-位-jvm-建立逻辑集群","link":"#使用-32-位-jvm-建立逻辑集群","children":[]},{"level":2,"title":"调优案例分析与实战","slug":"调优案例分析与实战","link":"#调优案例分析与实战","children":[{"level":3,"title":"场景描述","slug":"场景描述","link":"#场景描述","children":[]},{"level":3,"title":"分析","slug":"分析","link":"#分析","children":[]},{"level":3,"title":"直接内存的回收过程","slug":"直接内存的回收过程","link":"#直接内存的回收过程","children":[]}]}],"git":{"updatedTime":1608651434000,"contributors":[{"name":"杨立滨","username":"杨立滨","email":"szuyanglb@outlook.com","commits":2,"url":"https://github.com/杨立滨"},{"name":"yanglbme","username":"yanglbme","email":"szuyanglb@outlook.com","commits":11,"url":"https://github.com/yanglbme"},{"name":"杨立滨","username":"杨立滨","email":"contact@yanglibin.info","commits":1,"url":"https://github.com/杨立滨"}],"changelog":[{"hash":"eb967d76db398be3d4718d9140d8f4663e97622f","time":1608651434000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"docs: improve readability"},{"hash":"b9ac90393daa17ac91f072406788d0320cd7ef97","time":1603199026000,"email":"yanglbme@users.noreply.github.com","author":"yanglbme","message":"docs: prettify code"},{"hash":"44141143eaf33a804d08844e6437b0dc4995261e","time":1586069633000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"feat: add docsify and pagination"},{"hash":"5812abcddf7be190ae25ff2f4fae537c1d75953c","time":1531985256000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update index"},{"hash":"fc29eb9f65b88bdd5dd5dcb0cc2ef782e463ff3b","time":1531984929000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Add Index"},{"hash":"7a92c0e4989eb8136143d52d2281fb15257b44be","time":1531278268000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Write EOF"},{"hash":"44bb9a33ee01e13ffc8817d77cfee3fefb474161","time":1530252948000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Change path"},{"hash":"99ce82b1d8aa7c6e6451e108e35dfd958c05420c","time":1530186676000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Remove TOC"},{"hash":"a112cfd4f8cbd9de87c68112101c0ce4ed4a3fe5","time":1530183324000,"email":"contact@yanglibin.info","author":"杨立滨","message":"GitBook: [master] 12 pages modified"},{"hash":"26a1c453f8e4f2b56f07c9d36aae1959a1cf2e5f","time":1529933044000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Format doc style"},{"hash":"3d396e0a4b59619bbcbf24b383cbb1b0a858e136","time":1529914171000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update format"},{"hash":"e7436bd325af1fb64abbeb4886609414a17f3327","time":1529912260000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Rename filename"},{"hash":"0ba3384a98afcddcd808a0b8c111e15c56f9bbfe","time":1529843988000,"email":"szuyanglb@outlook.com","author":"杨立滨","message":"Update 06_JVM性能调优.md"},{"hash":"c2e9bef3aba26db4f595eaa80413ad9e51146361","time":1529843711000,"email":"szuyanglb@outlook.com","author":"杨立滨","message":"Create 06_JVM性能调优.md"}]},"filePathRelative":"06-jvm-performance-tuning.md"}');export{c as comp,h as data};
