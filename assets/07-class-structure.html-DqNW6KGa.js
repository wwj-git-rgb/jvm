import{_ as a,c as e,a as d,o as l}from"./app-BbxH2Yoy.js";const s={};function i(n,t){return l(),e("div",null,t[0]||(t[0]=[d('<h1 id="类文件结构" tabindex="-1"><a class="header-anchor" href="#类文件结构"><span>类文件结构</span></a></h1><h2 id="jvm-的-无关性" tabindex="-1"><a class="header-anchor" href="#jvm-的-无关性"><span>JVM 的“无关性”</span></a></h2><p>谈论 JVM 的无关性，主要有以下两个：</p><ul><li>平台无关性：任何操作系统都能运行 Java 代码</li><li>语言无关性： JVM 能运行除 Java 以外的其他代码</li></ul><p>Java 源代码首先需要使用 Javac 编译器编译成 .class 文件，然后由 JVM 执行 .class 文件，从而程序开始运行。</p><p>JVM 只认识 .class 文件，它不关心是何种语言生成了 .class 文件，只要 .class 文件符合 JVM 的规范就能运行。 目前已经有 JRuby、Jython、Scala 等语言能够在 JVM 上运行。它们有各自的语法规则，不过它们的编译器 都能将各自的源码编译成符合 JVM 规范的 .class 文件，从而能够借助 JVM 运行它们。</p><blockquote><p>Java 语言中的各种变量、关键字和运算符号的语义最终都是由多条字节码命令组合而成的， 因此字节码命令所能提供的语义描述能力肯定会比 Java 语言本身更加强大。 因此，有一些 Java 语言本身无法有效支持的语言特性，不代表字节码本身无法有效支持。</p></blockquote><h2 id="class-文件结构" tabindex="-1"><a class="header-anchor" href="#class-文件结构"><span>Class 文件结构</span></a></h2><p>Class 文件是二进制文件，它的内容具有严格的规范，文件中没有任何空格，全都是连续的 0/1。Class 文件 中的所有内容被分为两种类型：无符号数、表。</p><ul><li>无符号数 无符号数表示 Class 文件中的值，这些值没有任何类型，但有不同的长度。u1、u2、u4、u8 分别代表 1/2/4/8 字节的无符号数。</li><li>表 由多个无符号数或者其他表作为数据项构成的复合数据类型。</li></ul><p>Class 文件具体由以下几个构成:</p><ul><li>魔数</li><li>版本信息</li><li>常量池</li><li>访问标志</li><li>类索引、父类索引、接口索引集合</li><li>字段表集合</li><li>方法表集合</li><li>属性表集合</li></ul><h3 id="魔数" tabindex="-1"><a class="header-anchor" href="#魔数"><span>魔数</span></a></h3><p>Class 文件的头 4 个字节称为魔数，用来表示这个 Class 文件的类型。</p><p>Class 文件的魔数是用 16 进制表示的“CAFE BABE”，是不是很具有浪漫色彩？</p><blockquote><p>魔数相当于文件后缀名，只不过后缀名容易被修改，不安全，因此在 Class 文件中标识文件类型比较合适。</p></blockquote><h3 id="版本信息" tabindex="-1"><a class="header-anchor" href="#版本信息"><span>版本信息</span></a></h3><p>紧接着魔数的 4 个字节是版本信息，5-6 字节表示次版本号，7-8 字节表示主版本号，它们表示当前 Class 文件中使用的是哪个版本的 JDK。</p><p>高版本的 JDK 能向下兼容以前版本的 Class 文件，但不能运行以后版本的 Class 文件，即使文件格式并未发生任何变化，虚拟机也必须拒绝执行超过其版本号的 Class 文件。</p><h3 id="常量池" tabindex="-1"><a class="header-anchor" href="#常量池"><span>常量池</span></a></h3><p>版本信息之后就是常量池，常量池中存放两种类型的常量：</p><ul><li><p>字面值常量</p><p>字面值常量就是我们在程序中定义的字符串、被 final 修饰的值。</p></li><li><p>符号引用</p><p>符号引用就是我们定义的各种名字：类和接口的全限定名、字段的名字和描述符、方法的名字和描述符。</p></li></ul><h4 id="常量池的特点" tabindex="-1"><a class="header-anchor" href="#常量池的特点"><span>常量池的特点</span></a></h4><ul><li>常量池中常量数量不固定，因此常量池开头放置一个 u2 类型的无符号数，用来存储当前常量池的容量。</li><li>常量池的每一项常量都是一个表，表开始的第一位是一个 u1 类型的标志位（tag），代表当前这个常量属于哪种常量类型。</li></ul><h4 id="常量池中常量类型" tabindex="-1"><a class="header-anchor" href="#常量池中常量类型"><span>常量池中常量类型</span></a></h4><table><thead><tr><th>类型</th><th>tag</th><th>描述</th></tr></thead><tbody><tr><td>CONSTANT_utf8_info</td><td>1</td><td>UTF-8 编码的字符串</td></tr><tr><td>CONSTANT_Integer_info</td><td>3</td><td>整型字面量</td></tr><tr><td>CONSTANT_Float_info</td><td>4</td><td>浮点型字面量</td></tr><tr><td>CONSTANT_Long_info</td><td>5</td><td>长整型字面量</td></tr><tr><td>CONSTANT_Double_info</td><td>6</td><td>双精度浮点型字面量</td></tr><tr><td>CONSTANT_Class_info</td><td>7</td><td>类或接口的符号引用</td></tr><tr><td>CONSTANT_String_info</td><td>8</td><td>字符串类型字面量</td></tr><tr><td>CONSTANT_Fieldref_info</td><td>9</td><td>字段的符号引用</td></tr><tr><td>CONSTANT_Methodref_info</td><td>10</td><td>类中方法的符号引用</td></tr><tr><td>CONSTANT_InterfaceMethodref_info</td><td>11</td><td>接口中方法的符号引用</td></tr><tr><td>CONSTANT_NameAndType_info</td><td>12</td><td>字段或方法的符号引用</td></tr><tr><td>CONSTANT_MethodHandle_info</td><td>15</td><td>表示方法句柄</td></tr><tr><td>CONSTANT_MethodType_info</td><td>16</td><td>标识方法类型</td></tr><tr><td>CONSTANT_InvokeDynamic_info</td><td>18</td><td>表示一个动态方法调用点</td></tr></tbody></table><p>对于 CONSTANT_Class_info（此类型的常量代表一个类或者接口的符号引用），它的二维表结构如下：</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>name_index</td><td>1</td></tr></tbody></table><p>tag 是标志位，用于区分常量类型；name_index 是一个索引值，它指向常量池中一个 CONSTANT_Utf8_info 类型常量，此常量代表这个类（或接口）的全限定名，这里 name_index 值若为 0x0002，也即是指向了常量池中的第二项常量。</p><p>CONSTANT_Utf8_info 型常量的结构如下：</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u1</td><td>tag</td><td>1</td></tr><tr><td>u2</td><td>length</td><td>1</td></tr><tr><td>u1</td><td>bytes</td><td>length</td></tr></tbody></table><p>tag 是当前常量的类型；length 表示这个字符串的长度；bytes 是这个字符串的内容（采用缩略的 UTF8 编码）</p><h3 id="访问标志" tabindex="-1"><a class="header-anchor" href="#访问标志"><span>访问标志</span></a></h3><p>在常量池结束之后，紧接着的两个字节代表访问标志，这个标志用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口；是否定义为 public 类型；是否被 abstract/final 修饰。</p><h3 id="类索引、父类索引、接口索引集合" tabindex="-1"><a class="header-anchor" href="#类索引、父类索引、接口索引集合"><span>类索引、父类索引、接口索引集合</span></a></h3><p>类索引和父类索引都是一个 u2 类型的数据，而接口索引集合是一组 u2 类型的数据的集合，Class 文件中由这三项数据来确定类的继承关系。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名。</p><p>由于 Java 不允许多重继承，所以父类索引只有一个，除了 java.lang.Object 之外，所有的 Java 类都有父类，因此除了 java.lang.Object 外，所有 Java 类的父类索引都不为 0。一个类可能实现了多个接口，因此用接口索引集合来描述。这个集合第一项为 u2 类型的数据，表示索引表的容量，接下来就是接口的名字索引。</p><p>类索引和父类索引用两个 u2 类型的索引值表示，它们各自指向一个类型为 CONSTANT_Class_info 的类描述符常量，通过该常量总的索引值可以找到定义在 CONSTANT_Utf8_info 类型的常量中的全限定名字符串。</p><h3 id="字段表集合" tabindex="-1"><a class="header-anchor" href="#字段表集合"><span>字段表集合</span></a></h3><p>字段表集合存储本类涉及到的成员变量，包括实例变量和类变量，但不包括方法中的局部变量。</p><p>每一个字段表只表示一个成员变量，本类中的所有成员变量构成了字段表集合。字段表结构如下：</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th><th>说明</th></tr></thead><tbody><tr><td>u2</td><td>access_flags</td><td>1</td><td>字段的访问标志，与类稍有不同</td></tr><tr><td>u2</td><td>name_index</td><td>1</td><td>字段名字的索引</td></tr><tr><td>u2</td><td>descriptor_index</td><td>1</td><td>描述符，用于描述字段的数据类型。 基本数据类型用大写字母表示； 对象类型用“L 对象类型的全限定名”表示。</td></tr><tr><td>u2</td><td>attributes_count</td><td>1</td><td>属性表集合的长度</td></tr><tr><td>u2</td><td>attributes</td><td>attributes_count</td><td>属性表集合，用于存放属性的额外信息，如属性的值。</td></tr></tbody></table><blockquote><p>字段表集合中不会出现从父类（或接口）中继承而来的字段，但有可能出现原本 Java 代码中不存在的字段，譬如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。</p></blockquote><h3 id="方法表集合" tabindex="-1"><a class="header-anchor" href="#方法表集合"><span>方法表集合</span></a></h3><p>方法表结构与属性表类似。</p><p>volatile 关键字 和 transient 关键字不能修饰方法，所以方法表的访问标志中没有 ACC_VOLATILE 和 ACC_TRANSIENT 标志。</p><p>方法表的属性表集合中有一张 Code 属性表，用于存储当前方法经编译器编译后的字节码指令。</p><h3 id="属性表集合" tabindex="-1"><a class="header-anchor" href="#属性表集合"><span>属性表集合</span></a></h3><p>每个属性对应一张属性表，属性表的结构如下：</p><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td></tr><tr><td>u1</td><td>info</td><td>attribute_length</td></tr></tbody></table>',50)]))}const h=a(s,[["render",i]]),r=JSON.parse('{"path":"/07-class-structure.html","title":"类文件结构","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"JVM 的“无关性”","slug":"jvm-的-无关性","link":"#jvm-的-无关性","children":[]},{"level":2,"title":"Class 文件结构","slug":"class-文件结构","link":"#class-文件结构","children":[{"level":3,"title":"魔数","slug":"魔数","link":"#魔数","children":[]},{"level":3,"title":"版本信息","slug":"版本信息","link":"#版本信息","children":[]},{"level":3,"title":"常量池","slug":"常量池","link":"#常量池","children":[]},{"level":3,"title":"访问标志","slug":"访问标志","link":"#访问标志","children":[]},{"level":3,"title":"类索引、父类索引、接口索引集合","slug":"类索引、父类索引、接口索引集合","link":"#类索引、父类索引、接口索引集合","children":[]},{"level":3,"title":"字段表集合","slug":"字段表集合","link":"#字段表集合","children":[]},{"level":3,"title":"方法表集合","slug":"方法表集合","link":"#方法表集合","children":[]},{"level":3,"title":"属性表集合","slug":"属性表集合","link":"#属性表集合","children":[]}]}],"git":{"updatedTime":1654015948000,"contributors":[{"name":"杨立滨","username":"杨立滨","email":"szuyanglb@outlook.com","commits":1,"url":"https://github.com/杨立滨"},{"name":"yanglbme","username":"yanglbme","email":"szuyanglb@outlook.com","commits":14,"url":"https://github.com/yanglbme"},{"name":"杨立滨","username":"杨立滨","email":"contact@yanglibin.info","commits":1,"url":"https://github.com/杨立滨"},{"name":"蒋双骏","username":"蒋双骏","email":"841126454@qq.com","commits":1,"url":"https://github.com/蒋双骏"},{"name":"songyingshuan","username":"songyingshuan","email":"songyingshuan@gmail.com","commits":1,"url":"https://github.com/songyingshuan"},{"name":"Oliver","username":"Oliver","email":"wqdyxnbd@163.com","commits":1,"url":"https://github.com/Oliver"}],"changelog":[{"hash":"14a16461f032c7c0ef90b2380f24be6d1613ccbb","time":1654015948000,"email":"wqdyxnbd@163.com","author":"Oliver","message":"docs: fix typo (#29)"},{"hash":"b9ac90393daa17ac91f072406788d0320cd7ef97","time":1603199026000,"email":"yanglbme@users.noreply.github.com","author":"yanglbme","message":"docs: prettify code"},{"hash":"6772521996b334f8156b30669c58504013b95e66","time":1595838038000,"email":"songyingshuan@gmail.com","author":"songyingshuan","message":"docs: 纠正 07-class-structure.md 中错别字"},{"hash":"44141143eaf33a804d08844e6437b0dc4995261e","time":1586069633000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"feat: add docsify and pagination"},{"hash":"b863547f0f7fc64c8e6637f03fe215067b8bc617","time":1557990572000,"email":"841126454@qq.com","author":"蒋双骏","message":"修改 07-class-structure.md 部分错别字"},{"hash":"4a68ad89904cbca92ea1ec0b669aefff4666b689","time":1532269808000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update 07-class-structure.md"},{"hash":"5812abcddf7be190ae25ff2f4fae537c1d75953c","time":1531985256000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update index"},{"hash":"fc29eb9f65b88bdd5dd5dcb0cc2ef782e463ff3b","time":1531984929000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Add Index"},{"hash":"7a92c0e4989eb8136143d52d2281fb15257b44be","time":1531278268000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Write EOF"},{"hash":"44bb9a33ee01e13ffc8817d77cfee3fefb474161","time":1530252948000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Change path"},{"hash":"99ce82b1d8aa7c6e6451e108e35dfd958c05420c","time":1530186676000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Remove TOC"},{"hash":"a112cfd4f8cbd9de87c68112101c0ce4ed4a3fe5","time":1530183324000,"email":"contact@yanglibin.info","author":"杨立滨","message":"GitBook: [master] 12 pages modified"},{"hash":"26a1c453f8e4f2b56f07c9d36aae1959a1cf2e5f","time":1529933044000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Format doc style"},{"hash":"8a44b7959a1ed4499b3d156f6e0a6f3052be874b","time":1529928342000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update 07-class-structure.md"},{"hash":"735dfbd6a49633cba6291571b638467e10671323","time":1529928119000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update 07-class-structure.md"},{"hash":"3d396e0a4b59619bbcbf24b383cbb1b0a858e136","time":1529914171000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update format"},{"hash":"1a148554da6391735c7a5e4501762b967674029a","time":1529912562000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Update 07-class-structure.md"},{"hash":"e7436bd325af1fb64abbeb4886609414a17f3327","time":1529912260000,"email":"szuyanglb@outlook.com","author":"yanglbme","message":"Rename filename"},{"hash":"4d8a60c18c37910fba2f59f3021a22a7416a6ce1","time":1529849217000,"email":"szuyanglb@outlook.com","author":"杨立滨","message":"Create 07_类文件结构.md"}]},"filePathRelative":"07-class-structure.md"}');export{h as comp,r as data};
